version: 2

aliases:
  - &working_directory 
    ~/project
  - &node_docker_image
    - image: circleci/node:10.8-browsers
      environment:
        TERM: xterm
  - &cypress_docker_image
    - image: cypress/base:10
      environment:
        TERM: xterm
  - &restore_yarn_cache
    restore_cache:
      keys:
        - v2-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - v2-yarn-{{ .Branch }}
        - v2-yarn-
  - &save_yarn_cache
    save_cache:
      key: v2-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
  - &yarn_install
    run: yarn install --non-interactive --frozen-lockfile
  - &yarn_build
    run:
      name: yarn build
      command: |
        export REACT_APP_BUILD_ID="${CIRCLE_SHA1:0:7}"
        yarn build

jobs:
  unit_test_and_build:
    working_directory: *working_directory
    docker: *node_docker_image
    steps:
      - checkout
      - *restore_yarn_cache
      - *yarn_install
      - *save_yarn_cache
      - run: yarn test:ci
      - run: yarn lint
      - *yarn_build
      - persist_to_workspace:
          root: *working_directory
          paths:
            - build
      - store_test_results:
          path: ./reports
  build_release:
    working_directory: *working_directory
    docker: *node_docker_image
    steps:
      - checkout
      - *restore_yarn_cache
      - *yarn_install
      - *save_yarn_cache
      - *yarn_build
      - run:
          name: rename build dir to build-release
          command: mv build build-release
      - persist_to_workspace:
          root: *working_directory
          paths:
             - build-release
  e2e_testing:
    working_directory: *working_directory
    docker: *cypress_docker_image
    parallelism: 1
    steps:
      - checkout
      - attach_workspace:
          at: *working_directory
      - *restore_yarn_cache
      - *yarn_install
      - *save_yarn_cache
      - run: 
          command: yarn run serve:build
          background: true
      - run: 
          command: $(yarn bin)/cypress run --reporter junit --reporter-options "mochaFile=reports/cypress/results.xml"
          when: on_success
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
      - store_test_results:
          path: ./reports
  deploy_to_staging:
    working_directory: *working_directory
    docker: *node_docker_image
    steps:
      - checkout
      - attach_workspace:
          at: *working_directory
      - *restore_yarn_cache
      - *yarn_install
      - *save_yarn_cache
      - run:
          name: Deploy master to staging
          command: ./node_modules/.bin/firebase deploy --project artfullylondon-staging-admin --token=$FIREBASE_DEPLOY_TOKEN --non-interactive
  deploy_to_prod:
    working_directory: *working_directory
    docker: *node_docker_image
    steps:
      - checkout
      - attach_workspace:
          at: *working_directory
      - *restore_yarn_cache
      - *yarn_install
      - *save_yarn_cache
      - run:
          name: Deploy master to prod
          command: ./node_modules/.bin/firebase deploy --public=./build-release --project artfullylondon-prod-admin --token=$FIREBASE_DEPLOY_TOKEN --non-interactive
  visual_regression_testing:
    working_directory: *working_directory
    docker: *node_docker_image
    steps:
      - checkout
      - *restore_yarn_cache
      - *yarn_install
      - *save_yarn_cache
      - run: yarn run screenshot
      - run: yarn run screenshot:regression
  tag_release:
    working_directory: *working_directory
    docker: *node_docker_image
    steps:
      - add_ssh_keys:
          fingerprints:
            - "a3:e6:ff:7f:2b:f0:29:8d:cc:6b:06:3c:28:0a:bc:d7"
      - checkout
      - run:
          name: Git push
          command: |
            git config --global user.email "ci@artfullylondon.com"
            git config --global user.name "circleci"
            git config --global push.default simple
            export GIT_TAG="release-${CIRCLE_SHA1:0:7}"
            git tag -a $GIT_TAG -m "tag master"
            git push origin $GIT_TAG

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - unit_test_and_build:
          context: artfully-staging
      - visual_regression_testing:
          context: artfully-staging
      - e2e_testing:
          context: artfully-staging
          requires:
            - unit_test_and_build
      - deploy_to_staging:
          context: artfully-staging
          requires:
            - unit_test_and_build
            - e2e_testing
          filters:
            branches:
              only:
                - master
      - build_release:
          context: artfully-staging # TODO artfully-prod
          filters:
            branches:
              only:
                - master
      - hold:
          type: approval
          requires:
            - deploy_to_staging
            - build_release
          filters:
            branches:
              only:
                - master
      - deploy_to_prod:
          context: artfully-staging # TODO artfully-prod
          requires:
            - hold
          filters:
            branches:
              only:
                - master
      - tag_release:
          requires:
            - deploy_to_prod
          filters:
            branches:
              only:
                - master